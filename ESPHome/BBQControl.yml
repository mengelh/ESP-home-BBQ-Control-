esphome:
  name: grill
  friendly_name: Grill

esp32:
  board: esp32dev
  framework:
    type: arduino

# Logging
logger:
  level: ERROR
# Enable Home Assistant API
api:
  encryption:
    key: "bAba43MgGGkpW1wRhkLaBTeqTiMcC7vV+fTjqOmUAyk="
ota:
  password: "63414a571f18dde538ff52bfbe462b13"
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Grill Fallback Hotspot"
    password: "UuuTaNkkfYGp"
i2c:
# Termometer
ads1115:
  - address: 0x48
    id: ads1115_48
  - address: 0x49 
    id: ads1115_49
# Servo Controler
pca9685:
  - frequency: 50
    address: 0x40
# Servo Output
output:
# Templates für die Regler
  - platform: template
    id: regler_output_garraum
    type: float
    write_action:
      if:
        condition:
          lambda: 'return id(thermostat_garraum).mode != CLIMATE_MODE_OFF;'
        then:
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_1).state == "Regler Garraum";'
              then:
                - number.set:
                    id: regler_1
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_2).state == "Regler Garraum";'
              then:
                - number.set:
                    id: regler_2
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_3).state == "Regler Garraum";'
              then:
                - number.set:
                    id: regler_3
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_4).state == "Regler Garraum";'
              then:
                - number.set:
                    id: regler_4
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_5).state == "Regler Garraum";'
              then:
                - number.set:
                    id: regler_5
                    value: !lambda 'return state * 100;'
  - platform: template
    id: regler_output_kocher
    type: float
    write_action:
      if:
        condition:
          lambda: 'return id(thermostat_kocher).mode != CLIMATE_MODE_OFF;'
        then:
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_1).state == "Regler Kocher";'
              then:
                - number.set:
                    id: regler_1
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_2).state == "Regler Kocher";'
              then:
                - number.set:
                    id: regler_2
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_3).state == "Regler Kocher";'
              then:
                - number.set:
                    id: regler_3
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_4).state == "Regler Kocher";'
              then:
                - number.set:
                    id: regler_4
                    value: !lambda 'return state * 100;'
          - if:
              condition:
                lambda: 'return id(zuordnung_regler_5).state == "Regler Kocher";'
              then:
                - number.set:
                    id: regler_5
                    value: !lambda 'return state * 100;'
# Tatsächliche Servo Ausgänge
  - platform: pca9685
    id: servo_output_1
    channel: 0
  - platform: pca9685
    id: servo_output_2
    channel: 1
  - platform: pca9685
    id: servo_output_3
    channel: 2
  - platform: pca9685
    id: servo_output_4
    channel: 3
  - platform: pca9685
    id: servo_output_5
    channel: 4
  - platform: pca9685
    id: servo_output_6
    channel: 5
# Servo
servo:
  - id: servo_1
    output: servo_output_1
  - id: servo_2
    output: servo_output_2
  - id: servo_3
    output: servo_output_3
  - id: servo_4
    output: servo_output_4
  - id: servo_5
    output: servo_output_5
  - id: servo_6
    output: servo_output_6
# Servo Controler
number:
  - name: "Regler 1"
    platform: template
    id: regler_1
    min_value: 0
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: servo_1
            level: !lambda 'return (((x/100*(85-25))+25)-50)/50;'
  - name: "Regler 2"
    platform: template
    id: regler_2
    min_value: 0
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: servo_2
            level: !lambda 'return (((x/100*(85-25))+25)-50)/50;'
  - name: "Regler 3"
    platform: template
    id: regler_3
    min_value: 0
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: servo_3
            level: !lambda 'return (((x/100*(85-25))+25)-50)/50;'
  - name: "Regler 4"
    platform: template
    id: regler_4
    min_value: 0
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: servo_4
            level: !lambda 'return (((x/100*(85-25))+25)-50)/50;'
  - name: "Regler 5"
    platform: template
    id: regler_5
    min_value: 0
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: servo_5
            level: !lambda 'return (((x/100*(85-25))+25)-50)/50;'
  - name: "Drehspiß"
    platform: template
    id: regler_6
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: servo_6
            level: !lambda 'return x/100;'
# Selektoren um die Conroler reglern zuzuordnen
select:
  - name: "Regler 1"
    platform: template
    id: zuordnung_regler_1
    options:
      - "keine"
      - "Regler Garraum"
      - "Regler Kocher"
    initial_option: "keine"
    optimistic: true
  - name: "Regler 2"
    platform: template
    id: zuordnung_regler_2
    options:
      - "keine"
      - "Regler Garraum"
      - "Regler Kocher"
    initial_option: "keine"
    optimistic: true
  - name: "Regler 3"
    platform: template
    id: zuordnung_regler_3
    options:
      - "keine"
      - "Regler Garraum"
      - "Regler Kocher"
    initial_option: "keine"
    optimistic: true
  - name: "Regler 4"
    platform: template
    id: zuordnung_regler_4
    options:
      - "keine"
      - "Regler Garraum"
      - "Regler Kocher"
    initial_option: "keine"
    optimistic: true
  - name: "Regler 5"
    platform: template
    id: zuordnung_regler_5
    options:
      - "keine"
      - "Regler Garraum"
      - "Regler Kocher"
    initial_option: "keine"
    optimistic: true
# Sensoren
sensor:
# Temperatur
  - name: "Grillgut 1"
    id: grillthermometer_1_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_49
    multiplexer: 'A3_GND'
    gain: 4.096
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
         - 3.1 -> 22.5
         - 0.7 -> 82.7
      - lambda: |-
          if (x >= 0) {
            return x;
          } else {
            return 0;
          }
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_1).current_temperature <= 0;'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_1_zustand
              state: "Das Thermometer ist nicht angeschlossen"
        else:
          if:
            condition:
              lambda: 'return id(grillthermometer_1).mode == CLIMATE_MODE_OFF;'
            then:
              - text_sensor.template.publish:
                  id: grillthermometer_1_zustand
                  state: "Die Temperatur wird nicht überwacht"
            else:
              if:
                condition:
                  lambda: 'return id(grillthermometer_1).target_temperature_low >= id(grillthermometer_1).current_temperature;'
                then:
                  - text_sensor.template.publish:
                      id: grillthermometer_1_zustand
                      state: "Das Grillgut wird gegart"
                else:
                  - text_sensor.template.publish:
                      id: grillthermometer_1_zustand
                      state: "Das Grillgut ist fertig"
  - name: "Grillgut 2"
    id: grillthermometer_2_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_49
    multiplexer: 'A2_GND'
    gain: 4.096
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
         - 3.1 -> 22.5
         - 0.7 -> 82.7
      - lambda: |-
          if (x >= 0) {
            return x;
          } else {
            return 0;
          }
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_2).current_temperature <= 0;'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_2_zustand
              state: "Das Thermometer ist nicht angeschlossen"
        else:
          if:
            condition:
              lambda: 'return id(grillthermometer_2).mode == CLIMATE_MODE_OFF;'
            then:
              - text_sensor.template.publish:
                  id: grillthermometer_2_zustand
                  state: "Die Temperatur wird nicht überwacht"
            else:
              if:
                condition:
                  lambda: 'return id(grillthermometer_2).target_temperature_low >= id(grillthermometer_2).current_temperature;'
                then:
                  - text_sensor.template.publish:
                      id: grillthermometer_2_zustand
                      state: "Das Grillgut wird gegart"
                else:
                  - text_sensor.template.publish:
                      id: grillthermometer_2_zustand
                      state: "Das Grillgut ist fertig"
  - name: "Grillgut 3"
    id: grillthermometer_3_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_49
    multiplexer: 'A1_GND'
    gain: 4.096
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
         - 3.1 -> 22.5
         - 0.7 -> 82.7
      - lambda: |-
          if (x >= 0) {
            return x;
          } else {
            return 0;
          }
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_3).current_temperature <= 0;'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_3_zustand
              state: "Das Thermometer ist nicht angeschlossen"
        else:
          if:
            condition:
              lambda: 'return id(grillthermometer_3).mode == CLIMATE_MODE_OFF;'
            then:
              - text_sensor.template.publish:
                  id: grillthermometer_3_zustand
                  state: "Die Temperatur wird nicht überwacht"
            else:
              if:
                condition:
                  lambda: 'return id(grillthermometer_3).target_temperature_low >= id(grillthermometer_3).current_temperature;'
                then:
                  - text_sensor.template.publish:
                      id: grillthermometer_3_zustand
                      state: "Das Grillgut wird gegart"
                else:
                  - text_sensor.template.publish:
                      id: grillthermometer_3_zustand
                      state: "Das Grillgut ist fertig"
  - name: "Grillgut 4"
    id: grillthermometer_4_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_49
    multiplexer: 'A0_GND'
    gain: 4.096
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
         - 3.1 -> 22.5
         - 0.7 -> 82.7
      - lambda: |-
          if (x >= 0) {
            return x;
          } else {
            return 0;
          }
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_4).current_temperature <= 0;'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_4_zustand
              state: "Das Thermometer ist nicht angeschlossen"
        else:
          if:
            condition:
              lambda: 'return id(grillthermometer_4).mode == CLIMATE_MODE_OFF;'
            then:
              - text_sensor.template.publish:
                  id: grillthermometer_4_zustand
                  state: "Die Temperatur wird nicht überwacht"
            else:
              if:
                condition:
                  lambda: 'return id(grillthermometer_4).target_temperature_low >= id(grillthermometer_4).current_temperature;'
                then:
                  - text_sensor.template.publish:
                      id: grillthermometer_4_zustand
                      state: "Das Grillgut wird gegart"
                else:
                  - text_sensor.template.publish:
                      id: grillthermometer_4_zustand
                      state: "Das Grillgut ist fertig"
  - name: "Grillgut 5"
    id: grillthermometer_5_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_48
    multiplexer: 'A3_GND'
    gain: 4.096
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
         - 3.1 -> 22.5
         - 0.7 -> 82.7
      - lambda: |-
          if (x >= 0) {
            return x;
          } else {
            return 0;
          }
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_5).current_temperature <= 0;'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_5_zustand
              state: "Das Thermometer ist nicht angeschlossen"
        else:
          if:
            condition:
              lambda: 'return id(grillthermometer_5).mode == CLIMATE_MODE_OFF;'
            then:
              - text_sensor.template.publish:
                  id: grillthermometer_5_zustand
                  state: "Die Temperatur wird nicht überwacht"
            else:
              if:
                condition:
                  lambda: 'return id(grillthermometer_5).target_temperature_low >= id(grillthermometer_5).current_temperature;'
                then:
                  - text_sensor.template.publish:
                      id: grillthermometer_5_zustand
                      state: "Das Grillgut wird gegart"
                else:
                  - text_sensor.template.publish:
                      id: grillthermometer_5_zustand
                      state: "Das Grillgut ist fertig"
  - name: "Grillgut 6"
    id: grillthermometer_6_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_48
    multiplexer: 'A2_GND'
    gain: 4.096
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    filters:
      - calibrate_linear:
         - 3.1 -> 22.5
         - 0.7 -> 82.7
      - lambda: |-
          if (x >= 0) {
            return x;
          } else {
            return 0;
          }
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_6).current_temperature <= 0;'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_6_zustand
              state: "Das Thermometer ist nicht angeschlossen"
        else:
          if:
            condition:
              lambda: 'return id(grillthermometer_6).mode == CLIMATE_MODE_OFF;'
            then:
              - text_sensor.template.publish:
                  id: grillthermometer_6_zustand
                  state: "Die Temperatur wird nicht überwacht"
            else:
              if:
                condition:
                  lambda: 'return id(grillthermometer_6).target_temperature_low >= id(grillthermometer_6).current_temperature;'
                then:
                  - text_sensor.template.publish:
                      id: grillthermometer_6_zustand
                      state: "Das Grillgut wird gegart"
                else:
                  - text_sensor.template.publish:
                      id: grillthermometer_6_zustand
                      state: "Das Grillgut ist fertig"
  - name: "Kocher"
    id: grillthermometer_7_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_48
    multiplexer: 'A1_GND'
    gain: 4.096
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 2
    filters:
      - calibrate_polynomial:
          degree: 6
          datapoints:
            - 5.1 -> -25
            - 4.99 -> 21
            - 4.85 -> 32
            - 4.7 -> 58
            - 4.54 -> 69
            - 4.5 -> 72
            - 4.31 -> 83
            - 3.93 -> 97
            - 3.2 -> 128
            - 2.5 -> 155
            - 1.6 -> 188
            - 0.44 -> 271
            - 0.25 -> 350
      - lambda: |-
          if (x >= 40) {
            return x;
          } else {
            return 0;
          }
  - name: "Garraum"
    id: grillthermometer_8_temperatur
    icon: mdi:thermometer
    ads1115_id: ads1115_48
    multiplexer: 'A0_GND'
    gain: 6.144
    update_interval: 1s
    platform: ads1115
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - calibrate_polynomial:
          degree: 6
          datapoints:
            - 5.1 -> -25
            - 4.99 -> 21
            - 4.85 -> 32
            - 4.7 -> 58
            - 4.54 -> 69
            - 4.5 -> 72
            - 4.31 -> 83
            - 3.93 -> 97
            - 3.2 -> 128
            - 2.5 -> 155
            - 1.6 -> 188
            - 0.44 -> 271
            - 0.25 -> 350
      - lambda: |-
          if (x >= 40) {
            return x;
          } else {
            return 0;
          }
# PID (Löschen wenn die Werte bestimmt sind)
  - name: "Kocher KP"
    platform: pid
    climate_id: thermostat_kocher
    type: KP
  - name: "Kocher KI"
    platform: pid
    climate_id: thermostat_kocher
    type: KI
  - name: "Kocher KD"
    platform: pid
    climate_id: thermostat_kocher
    type: KD
  - name: "Garraum KP"
    platform: pid
    climate_id: thermostat_garraum
    type: KP
  - name: "Garraum KI"
    platform: pid
    climate_id: thermostat_garraum
    type: KI
  - name: "Garraum KD"
    platform: pid
    climate_id: thermostat_garraum
    type: KD
# Text Sensoren
text_sensor:
  - name: "Grillgut 1"
    id: grillthermometer_1_zustand
    icon: mdi:email
    platform: template
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_1_zustand).state == "Das Grillgut ist fertig";'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_zustand
              state: "grillthermometer_grillgut_1_zustand"
  - name: "Grillgut 2"
    id: grillthermometer_2_zustand
    icon: mdi:email
    platform: template
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_2_zustand).state == "Das Grillgut ist fertig";'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_zustand
              state: "grillthermometer_grillgut_2_zustand"
  - name: "Grillgut 3"
    id: grillthermometer_3_zustand
    icon: mdi:email
    platform: template
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_3_zustand).state == "Das Grillgut ist fertig";'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_zustand
              state: "grillthermometer_grillgut_3_zustand"
  - name: "Grillgut 4"
    id: grillthermometer_4_zustand
    icon: mdi:email
    platform: template
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_4_zustand).state == "Das Grillgut ist fertig";'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_zustand
              state: "grillthermometer_grillgut_4_zustand"
  - name: "Grillgut 5"
    id: grillthermometer_5_zustand
    icon: mdi:email
    platform: template
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_5_zustand).state == "Das Grillgut ist fertig";'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_zustand
              state: "grillthermometer_grillgut_5_zustand"
  - name: "Grillgut 6"
    id: grillthermometer_6_zustand
    icon: mdi:email
    platform: template
    on_value:
      if:
        condition:
          lambda: 'return id(grillthermometer_6_zustand).state == "Das Grillgut ist fertig";'
        then:
          - text_sensor.template.publish:
              id: grillthermometer_zustand
              state: "grillthermometer_grillgut_6_zustand"
  - name: "Grillgut"
    id: grillthermometer_zustand
    icon: mdi:email
    platform: template
# Regler
climate:
# Grillgut
  - name: "Grillgut 1"
    platform: thermostat
    id: grillthermometer_1
    sensor: grillthermometer_1_temperatur
    preset:
      - name: Rind (Medium Rare)
        default_target_temperature_low: 50 °C
    min_heating_off_time: 0s
    min_heating_run_time: 0s
    min_idle_time: 0s
    visual:
      min_temperature: 20 °C
      max_temperature: 100 °C
    heat_action:
      - logger.log: "Action"
    idle_action:
      - logger.log: "Action"
  - name: "Grillgut 2"
    platform: thermostat
    id: grillthermometer_2
    sensor: grillthermometer_2_temperatur
    preset:
      - name: Rind (Medium Rare)
        default_target_temperature_low: 50 °C
    min_heating_off_time: 0s
    min_heating_run_time: 0s
    min_idle_time: 0s
    visual:
      min_temperature: 20 °C
      max_temperature: 100 °C
    heat_action:
      - logger.log: "Action"
    idle_action:
      - logger.log: "Action"
  - name: "Grillgut 3"
    platform: thermostat
    id: grillthermometer_3
    sensor: grillthermometer_3_temperatur
    preset:
      - name: Rind (Medium Rare)
        default_target_temperature_low: 50 °C
    min_heating_off_time: 30s
    min_heating_run_time: 0s
    min_idle_time: 0s
    visual:
      min_temperature: 20 °C
      max_temperature: 100 °C
    heat_action:
      - logger.log: "Action"
    idle_action:
      - logger.log: "Action"
  - name: "Grillgut 4"
    platform: thermostat
    id: grillthermometer_4
    sensor: grillthermometer_4_temperatur
    preset:
      - name: Rind (Medium Rare)
        default_target_temperature_low: 50 °C
    min_heating_off_time: 0s
    min_heating_run_time: 0s
    min_idle_time: 0s
    visual:
      min_temperature: 20 °C
      max_temperature: 100 °C
    heat_action:
      - logger.log: "Action"
    idle_action:
      - logger.log: "Action"
  - name: "Grillgut 5"
    platform: thermostat
    id: grillthermometer_5
    sensor: grillthermometer_5_temperatur
    preset:
      - name: Rind (Medium Rare)
        default_target_temperature_low: 50 °C
    min_heating_off_time: 0s
    min_heating_run_time: 0s
    min_idle_time: 0s
    visual:
      min_temperature: 20 °C
      max_temperature: 100 °C
    heat_action:
      - logger.log: "Action"
    idle_action:
      - logger.log: "Action"
  - name: "Grillgut 6"
    platform: thermostat
    id: grillthermometer_6
    sensor: grillthermometer_6_temperatur
    preset:
      - name: Rind (Medium Rare)
        default_target_temperature_low: 50 °C
    min_heating_off_time: 0s
    min_heating_run_time: 0s
    min_idle_time: 0s
    visual:
      min_temperature: 20 °C
      max_temperature: 100 °C
    heat_action:
      - logger.log: "Action"
    idle_action:
      - logger.log: "Action"
# Garraum
  - name: "Garraum"
    platform: pid
    id: thermostat_garraum
    sensor: grillthermometer_8_temperatur
    default_target_temperature: 200°C
    heat_output: regler_output_garraum
    visual:
      min_temperature: 40°C
      max_temperature: 300°C
    control_parameters:
      kp: 0
      ki: 0
      kd: 0
      output_averaging_samples: 5      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples
    deadband_parameters:
      threshold_high: 0.5°C       # deadband within +/-0.5°C of target_temperature
      threshold_low: -0.5°C
# Kocher
  - name: "Kocher"
    platform: pid
    id: thermostat_kocher
    sensor: grillthermometer_7_temperatur
    default_target_temperature: 200°C
    heat_output: regler_output_kocher
    visual:
      min_temperature: 40°C
      max_temperature: 300°C
    control_parameters:
      kp: 0
      ki: 0
      kd: 0
      output_averaging_samples: 5      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples
    deadband_parameters:
      threshold_high: 0.5°C       # deadband within +/-0.5°C of target_temperature
      threshold_low: -0.5°C
# Thermostat PID Autotune (Löschen wenn die Werte bestimmt sind)
button:
  - name: "Garraum PID Autotune"
    platform: template
    id: thermostat_garraum_pid_Autotune
    on_press:
      - climate.pid.autotune: thermostat_garraum
  - name: "Kocher PID Autotune"
    platform: template
    id: thermostat_kocher_pid_Autotune
    on_press:
      - climate.pid.autotune: thermostat_kocher
captive_portal: